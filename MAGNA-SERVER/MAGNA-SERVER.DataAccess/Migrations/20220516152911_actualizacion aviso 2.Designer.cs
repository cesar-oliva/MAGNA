// <auto-generated />
using System;
using MAGNA_SERVER.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MAGNA_SERVER.DataAccess.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20220516152911_actualizacion aviso 2")]
    partial class actualizacionaviso2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MAGNA_SERVER.Entities.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AreaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.Assemble", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssembleCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssembleDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("AssemblePropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssembleTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TechnicalLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AssembleTypeId");

                    b.HasIndex("TechnicalLocationId");

                    b.ToTable("Assemble");
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.AssembleProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssembleDayGuarantee")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssembleMaker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssemblePurchaseDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssembleSerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AssembleProperty");
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.AssembleSubAssemble", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssembleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssembleVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AssembleId");

                    b.HasIndex("AssembleVersionId");

                    b.ToTable("AssembleSubAssemble");
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.AssembleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssembleTypeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssembleTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AssembleType");
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.Departament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DepartamentDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departament");
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmployeeAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EmployeeBirthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EmployeeEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeePhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EmployeeStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EmployeeState")
                        .HasColumnType("bit");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GenderDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GenderState")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.Notice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AffectedPart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AssembleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FaultDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaultType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("NoticeCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NoticeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NoticeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoticeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("NoticePriorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NoticeStateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NoticeTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TechnicalLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AssembleId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("NoticeCategoryId");

                    b.HasIndex("NoticePriorityId");

                    b.HasIndex("NoticeStateId");

                    b.HasIndex("NoticeTypeId");

                    b.ToTable("Notice");
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.NoticeCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NoticeCategoryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NoticeCategoryState")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Noticecategory");
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.NoticePriority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NoticePriorityDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NoticePriorityState")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("NoticePriority");
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.NoticeState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NoticeStateCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoticeStateDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NoticeState");
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.NoticeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NoticeTypeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoticeTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NoticeType");
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.Sector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SectorDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sector");
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.TechnicalLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DepartamentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TechnicalLocationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TechnicalLocationDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("DepartamentId");

                    b.HasIndex("SectorId");

                    b.ToTable("TechnicalLocation");
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.WorkOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<Guid?>("EmployeeId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NoticeId")
                        .HasColumnType("int");

                    b.Property<Guid?>("NoticeId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WorkOrderCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkOrderDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("WorkOrderEndingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WorkOrderStartingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkOrderStateId")
                        .HasColumnType("int");

                    b.Property<Guid?>("WorkOrderStateId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("NoticeId1");

                    b.HasIndex("WorkOrderStateId1");

                    b.ToTable("WorkOrder");
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.WorkOrderState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WorkOrderStateDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkOrderState");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.SubAssemble", b =>
                {
                    b.HasBaseType("MAGNA_SERVER.Entities.Assemble");

                    b.Property<int>("AssembleVersionNumber")
                        .HasColumnType("int");

                    b.ToTable("SubAssemble");
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.Assemble", b =>
                {
                    b.HasOne("MAGNA_SERVER.Entities.AssembleType", null)
                        .WithMany("Assemble")
                        .HasForeignKey("AssembleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MAGNA_SERVER.Entities.TechnicalLocation", null)
                        .WithMany("Assemble")
                        .HasForeignKey("TechnicalLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.AssembleSubAssemble", b =>
                {
                    b.HasOne("MAGNA_SERVER.Entities.Assemble", "Assemble")
                        .WithMany("AssembleSubAssemblies")
                        .HasForeignKey("AssembleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MAGNA_SERVER.Entities.SubAssemble", "AssembleVersion")
                        .WithMany()
                        .HasForeignKey("AssembleVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assemble");

                    b.Navigation("AssembleVersion");
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.Employee", b =>
                {
                    b.HasOne("MAGNA_SERVER.Entities.Gender", null)
                        .WithMany("Employee")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.Notice", b =>
                {
                    b.HasOne("MAGNA_SERVER.Entities.Assemble", null)
                        .WithMany("Notice")
                        .HasForeignKey("AssembleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MAGNA_SERVER.Entities.Employee", null)
                        .WithMany("Notice")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MAGNA_SERVER.Entities.NoticeCategory", null)
                        .WithMany("Notice")
                        .HasForeignKey("NoticeCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MAGNA_SERVER.Entities.NoticePriority", null)
                        .WithMany("Notice")
                        .HasForeignKey("NoticePriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MAGNA_SERVER.Entities.NoticeState", null)
                        .WithMany("Notice")
                        .HasForeignKey("NoticeStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MAGNA_SERVER.Entities.NoticeType", null)
                        .WithMany("Notice")
                        .HasForeignKey("NoticeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.TechnicalLocation", b =>
                {
                    b.HasOne("MAGNA_SERVER.Entities.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId");

                    b.HasOne("MAGNA_SERVER.Entities.Departament", "Departament")
                        .WithMany()
                        .HasForeignKey("DepartamentId");

                    b.HasOne("MAGNA_SERVER.Entities.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId");

                    b.Navigation("Area");

                    b.Navigation("Departament");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.WorkOrder", b =>
                {
                    b.HasOne("MAGNA_SERVER.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("MAGNA_SERVER.Entities.Notice", "Notice")
                        .WithMany()
                        .HasForeignKey("NoticeId1");

                    b.HasOne("MAGNA_SERVER.Entities.WorkOrderState", "WorkOrderState")
                        .WithMany()
                        .HasForeignKey("WorkOrderStateId1");

                    b.Navigation("Employee");

                    b.Navigation("Notice");

                    b.Navigation("WorkOrderState");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.SubAssemble", b =>
                {
                    b.HasOne("MAGNA_SERVER.Entities.Assemble", null)
                        .WithOne()
                        .HasForeignKey("MAGNA_SERVER.Entities.SubAssemble", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.Assemble", b =>
                {
                    b.Navigation("AssembleSubAssemblies");

                    b.Navigation("Notice");
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.AssembleType", b =>
                {
                    b.Navigation("Assemble");
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.Employee", b =>
                {
                    b.Navigation("Notice");
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.Gender", b =>
                {
                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.NoticeCategory", b =>
                {
                    b.Navigation("Notice");
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.NoticePriority", b =>
                {
                    b.Navigation("Notice");
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.NoticeState", b =>
                {
                    b.Navigation("Notice");
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.NoticeType", b =>
                {
                    b.Navigation("Notice");
                });

            modelBuilder.Entity("MAGNA_SERVER.Entities.TechnicalLocation", b =>
                {
                    b.Navigation("Assemble");
                });
#pragma warning restore 612, 618
        }
    }
}
