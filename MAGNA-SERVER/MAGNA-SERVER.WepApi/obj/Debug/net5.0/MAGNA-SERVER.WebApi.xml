<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MAGNA-SERVER.WebApi</name>
    </assembly>
    <members>
        <member name="M:MAGNA_SERVER.WebApi.Config.ExceptionMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
             El constructor recibe por inyeccion de dependencia el delegado del siguiente middleware
             cada vez que se instancia un middleware sabe cual es el siguiente para poder delegarle
             la ejecucion. tambien tenemos el parametro loggerFactoy que va a ser para poder contruir
             un logger y poder logear las excepciones en el gestor de excepciones
            </summary>
            <param name="next"></param>
            <param name="loggerFactory"></param>
        </member>
        <member name="M:MAGNA_SERVER.WebApi.Config.ExceptionMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Esta operacion se va a invocar cuando queremos delegar (es decir cuando el midelware anterior
            nos quiere delegar una ejecucion), es aqui donde se cachea de manera global.
            en el try ejecutamos el siguiente mildeware, encapsulamos todo el manejo de errores y todos los
            errores que se disparen dentro del siguiente mildeware hacia adelante se capturan dentro del try
            y en el catch con el logger creado con el logger factory vamos a logear el error con el mensaje que 
            queremos mas la excepcion y llamamos al metodo HandleGlobalExceptionAsync
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:MAGNA_SERVER.WebApi.Config.ExceptionMiddleware.HandleGlobalExceptionAsync(Microsoft.AspNetCore.Http.HttpContext,System.Exception)">
            <summary>
            creamos un metodo que maneja las excepciones de manera global y crea un response personalizado para informar al cliente
            crea una respuesta json, le ponemos el codigo del error (406) y creamos el response con el mensaje
            que algo salio mal y en el mismo mensaje muestro el stack trace. El error details se serializa y envia la respuesta.
            se ocupa de encapsular el error y enviar una respuesta.
            </summary>
            <param name="context"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:MAGNA_SERVER.WebApi.Controllers.AssembleController.#ctor(MAGNA_SERVER.Application.IApplication{MAGNA_SERVER.Entities.Assemble},MAGNA_SERVER.Application.IApplication{MAGNA_SERVER.Entities.AssembleType},AutoMapper.IMapper)">
            <summary>
            receives by parameter the application in Assemble and we inject it
            </summary>
            <remarks>
            
            </remarks>
            <param name="assemble"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:MAGNA_SERVER.WebApi.Controllers.AssembleController.Get">
            <summary>
            get a list of assemble objects
            </summary>
            <returns></returns>
        </member>
        <member name="M:MAGNA_SERVER.WebApi.Controllers.AssembleController.GetOne(System.Guid)">
            <summary>
            get a assemble object
            </summary>
            <remarks>
            receives an id from the client and returns an object of type assemble
            </remarks>
            <param name="id">object id</param>
            <returns>assemble object</returns>
            <response code="200"> OK. returns the requested object </response>
            <response code="400"> NotFound. returns the requested object was not found </response>
        </member>
        <member name="M:MAGNA_SERVER.WebApi.Controllers.AssembleController.Update(MAGNA_SERVER.WebApi.DataTransferObject.RegisterAssembleRequestDTO)">
            <summary>
            update a assemble objetc by id
            </summary>
            <remarks>
            Receive the object to modify, look for the assemble by id, map the entities request the update
            </remarks>
            <param name="dto"></param>
            <returns>response object</returns>
            <response code="200"> OK. returns the requested object </response>
            <response code="400"> NotFound. returns the requested object was not found </response>
        </member>
        <member name="M:MAGNA_SERVER.WebApi.Controllers.AssembleController.Delete(System.Guid)">
            <summary>
            Delete a assemble object by id
            </summary>
            <remarks>
             Receive the object to deleted, look for the assemble by id, request the delete
            </remarks>
            <param name="id"></param>
            <returns>response object</returns>
            <response code="200"> OK. returns the requested object </response>
            <response code="400"> NotFound. returns the requested object was not found </response>
        </member>
        <member name="M:MAGNA_SERVER.WebApi.Controllers.AssembleTypeController.#ctor(MAGNA_SERVER.Application.IApplication{MAGNA_SERVER.Entities.AssembleType},AutoMapper.IMapper)">
            <summary>
            receives by parameter the application in AssembleType and we inject it
            </summary>
            <remarks>
            
            </remarks>
            <param name="assembleType"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:MAGNA_SERVER.WebApi.Controllers.AssembleTypeController.Get">
            <summary>
            get a list of assembleType objects
            </summary>
            <returns></returns>
        </member>
        <member name="M:MAGNA_SERVER.WebApi.Controllers.AssembleTypeController.GetOne(System.Guid)">
            <summary>
            get a assembleType object
            </summary>
            <remarks>
            receives an id from the client and returns an object of type assembleType
            </remarks>
            <param name="id">object id</param>
            <returns>assembleType object</returns>
            <response code="200"> OK. returns the requested object </response>
            <response code="400"> NotFound. returns the requested object was not found </response>
        </member>
        <member name="M:MAGNA_SERVER.WebApi.Controllers.AssembleTypeController.Update(MAGNA_SERVER.WebApi.DataTransferObject.RegisterAssembleTypeRequestDTO)">
            <summary>
            update a assembleType objetc by id
            </summary>
            <remarks>
            Receive the object to modify, look for the assembleType by id, map the entities request the update
            </remarks>
            <param name="dto"></param>
            <returns>response object</returns>
            <response code="200"> OK. returns the requested object </response>
            <response code="400"> NotFound. returns the requested object was not found </response>
        </member>
        <member name="M:MAGNA_SERVER.WebApi.Controllers.AssembleTypeController.Delete(System.Guid)">
            <summary>
            Delete a assembleType object by id
            </summary>
            <remarks>
             Receive the object to deleted, look for the assembleType by id, request the delete
            </remarks>
            <param name="id"></param>
            <returns>response object</returns>
            <response code="200"> OK. returns the requested object </response>
            <response code="400"> NotFound. returns the requested object was not found </response>
        </member>
        <member name="M:MAGNA_SERVER.WebApi.Controllers.AuthController.#ctor(Microsoft.AspNetCore.Identity.UserManager{Microsoft.AspNetCore.Identity.IdentityUser},MAGNA_SERVER.Services.ITokenHandlerService)">
            <summary>
            builder authController
            /// </summary>
            <remarks>
            We are going to create two endpoints, one to register the user and the other to authenticate the user at login.
            the constructor receives the usermanager as a parameter and we can make use of it
            </remarks>
            <param name="userManager"></param>
            <param name="service"></param>
        </member>
        <member name="M:MAGNA_SERVER.WebApi.Controllers.AuthController.ThrowException">
            <summary>
            it is used to throw an exception and will allow us to test the operation
            </summary>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:MAGNA_SERVER.WebApi.Controllers.AuthController.Register(MAGNA_SERVER.WebApi.DataTransferObject.RegisterUserRequestDTO)">
            <summary>
            register user
            </summary>
            <remarks>
            receive from the request body data; first check if it meets the requirements (it is valid) we ask you to return the 
            user if it exists. If so, we return the existence to the client. Otherwise, register a new user.
            </remarks>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:MAGNA_SERVER.WebApi.Controllers.AuthController.Login(MAGNA_SERVER.WebApi.DataTransferObject.UserLoginRequestDTO)">
            <summary>
            login user
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:MAGNA_SERVER.WebApi.Controllers.EmployeeController.#ctor(MAGNA_SERVER.Application.IApplication{MAGNA_SERVER.Entities.Employee},AutoMapper.IMapper)">
            <summary>
            receives by parameter the application in Employee and we inject it
            </summary>
            <remarks>
            
            </remarks>
            <param name="employee"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:MAGNA_SERVER.WebApi.Controllers.EmployeeController.Get">
            <summary>
            get a list of employee objects
            </summary>
            <returns></returns>
        </member>
        <member name="M:MAGNA_SERVER.WebApi.Controllers.EmployeeController.GetOne(System.Guid)">
            <summary>
            get a employee object
            </summary>
            <remarks>
            receives an id from the client and returns an object of type employee
            </remarks>
            <param name="id">object id</param>
            <returns>employee object</returns>
            <response code="200"> OK. returns the requested object </response>
            <response code="400"> NotFound. returns the requested object was not found </response>
        </member>
        <member name="M:MAGNA_SERVER.WebApi.Controllers.EmployeeController.Update(MAGNA_SERVER.WebApi.DataTransferObject.RegisterEmployeeRequestDTO)">
            <summary>
            update a employee objetc by id
            </summary>
            <remarks>
            Receive the object to modify, look for the employee by id, map the entities request the update
            </remarks>
            <param name="dto"></param>
            <returns>response object</returns>
            <response code="200"> OK. returns the requested object </response>
            <response code="400"> NotFound. returns the requested object was not found </response>
        </member>
        <member name="M:MAGNA_SERVER.WebApi.Controllers.EmployeeController.Delete(System.Guid)">
            <summary>
            Delete a employe object by id
            </summary>
            <remarks>
             Receive the object to deleted, look for the employee by id, request the delete
            </remarks>
            <param name="id"></param>
            <returns>response object</returns>
            <response code="200"> OK. returns the requested object </response>
            <response code="400"> NotFound. returns the requested object was not found </response>
        </member>
        <member name="M:MAGNA_SERVER.WebApi.Controllers.NoticeController.#ctor(MAGNA_SERVER.Application.IApplication{MAGNA_SERVER.Entities.Notice},AutoMapper.IMapper)">
            <summary>
            receives by parameter the application in Notice and we inject it
            </summary>
            <remarks>
            
            </remarks>
            <param name="notice"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:MAGNA_SERVER.WebApi.Controllers.NoticeController.Get">
            <summary>
            get a list of notice objects
            </summary>
            <returns></returns>
        </member>
        <member name="M:MAGNA_SERVER.WebApi.Controllers.NoticeController.GetOne(System.Guid)">
            <summary>
            get a notice object
            </summary>
            <remarks>
            receives an id from the client and returns an object of type notice
            </remarks>
            <param name="id">object id</param>
            <returns>notice object</returns>
            <response code="200"> OK. returns the requested object </response>
            <response code="400"> NotFound. returns the requested object was not found </response>
        </member>
        <member name="M:MAGNA_SERVER.WebApi.Controllers.NoticeController.Update(MAGNA_SERVER.WebApi.DataTransferObject.RegisterNoticeRequestDTO)">
            <summary>
            update a notice objetc by id
            </summary>
            <remarks>
            Receive the object to modify, look for the notice by id, map the entities request the update
            </remarks>
            <param name="dto"></param>
            <returns>response object</returns>
            <response code="200"> OK. returns the requested object </response>
            <response code="400"> NotFound. returns the requested object was not found </response>
        </member>
        <member name="M:MAGNA_SERVER.WebApi.Controllers.NoticeController.Delete(System.Guid)">
            <summary>
            Delete a notice object by id
            </summary>
            <remarks>
             Receive the object to deleted, look for the notice by id, request the delete
            </remarks>
            <param name="id"></param>
            <returns>response object</returns>
            <response code="200"> OK. returns the requested object </response>
            <response code="400"> NotFound. returns the requested object was not found </response>
        </member>
        <member name="T:MAGNA_SERVER.WebApi.DataTransferObject.RegisterUserRequestDTO">
            <summary>
            represents the request by the client for user registration
            </summary>
        </member>
    </members>
</doc>
